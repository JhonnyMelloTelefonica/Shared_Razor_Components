@page "/register"
@layout UnauthLayout

@inject RegisterViewModel registerservice;
@inject ControleUsuariosAppViewModel service;
@using System.ComponentModel
@using System.Globalization

@using Shared_Razor_Components.ViewModels
@inject IJSRuntime JSRuntime


<PageTitle>Solicitação de Acesso</PageTitle>

@if (!service.IsBusy)
{
    <RadzenFieldset AllowCollapse="false" Collapsed="false" class="plus-button-header" Style=@witdhpage>
        <HeaderTemplate>
            <span class="d-inline-flex align-items-center align-middle">
                <b>Solicitação de acesso</b>
            </span>
        </HeaderTemplate>
        <ChildContent>
            <div class="text-sm-center justify-content-center flex-column d-flex">
                <Image Style="width:90px; margin: auto;cursor:pointer" Border="Blazorise.Border.RoundedCircle" @onclick="ClickFileInput"
                       Source="@(Criaruser.UserAvatar != null ? "data:image/png;base64," + Convert.ToBase64String(Criaruser.UserAvatar) : "images/usericon.png")">
                </Image>
                <InputFile type="file" id="myFileInput" OnChange="ChangeAvatar" hidden accept="image/*" />
                <span style="font-family: Vivo-font-bold" id="btn_myFileInput" @onclick="ClickFileInput">
                    @Criaruser.MATRICULA
                </span>
            </div>
            <br />
            <Div Width="Blazorise.Width.Is100" Flex="Blazorise.Flex.JustifyContent.Around">
                <ControleUserModalBody @ref=ModalComponent user="Criaruser" editContext="editContext" MatriculaDisabled="true" />
                @* <ControleUserModalBody user="@Criaruser" service="state" Perfis_Plataforma="state.perfis" editContext=editContext /> *@
            </Div>
        </ChildContent>
    </RadzenFieldset>
    <Blazorise.Div Flex="Blazorise.Flex.JustifyContent.End" Margin="Margin.Is3" Class="footer-register" Style=" position: absolute; bottom: 0; width: 90% ">
        <BlazorBootstrap.Button Color="BlazorBootstrap.ButtonColor.Info" @onclick="async () => await CriarUser(Criaruser)">Solicitar</BlazorBootstrap.Button>
        <BlazorBootstrap.Button Color="BlazorBootstrap.ButtonColor.Danger" @onclick="@(() => service.NavigationManager.NavigateTo("/",true))">Voltar</BlazorBootstrap.Button>
    </Blazorise.Div>
    <br />
}
else
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Carregando...</span>
        </div>
        <p style="font-family:Vivo-font-light">Veficando dados da sua mátricula</p>
    </div>
}


@code
{
    private ControleUserModalBody ModalComponent;
    public SOLICITAR_USUARIO_MODEL Criaruser { get; set; } = new();
    public TextInfo textInfo = new CultureInfo("pt-br", false).TextInfo;
    string witdhpage => registerservice.AlreadySolicitated ? "width: auto; margin: 40px auto;" : "width: 700px; margin: 40px auto;";
    public IBrowserFile file { get; set; }
    public EditContext editContext { get; set; }

    private async Task ClickFileInput()
    {
        await JSRuntime.InvokeVoidAsync("fileInputInterop.clickFileInput");
    }

    protected override async Task OnInitializedAsync()
    {   
        service.PropertyChanged += OnStateChanged;
        service.isBusy = true;
        await registerservice.VerifyCurrentUserExists();
        Criaruser.MATRICULA = service.GetUser_REDECORP.GetMatricula();
        editContext = new EditContext(Criaruser);
        service.isBusy = false;
        await base.OnInitializedAsync();
    }

    public async Task ChangeAvatar(InputFileChangeEventArgs args)
    {
        Criaruser.UserAvatar = null;
        service.isBusy = true;
        file = args.File;
        if (file != null)
        {
            using (var stream = file.OpenReadStream())
            {
                Criaruser.UserAvatar = new byte[stream.Length];
                await stream.ReadAsync(Criaruser.UserAvatar, 0, (int)stream.Length);
            }
        }
        service.isBusy = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task CriarUser(SOLICITAR_USUARIO_MODEL user)
    {
        var saida = editContext.Validate();
        if (!saida)
        {
            await service.MessageService.Error("Informe os dados corretamente!", "Preste atenção!");

            return;
        }

        var OBS = await service.Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Quase lá...",
                Text = "Por favor nos dê mais detalhes sobre quem você é e sua motivação para solicitação de acesso a ferramenta",
                Icon = SweetAlertIcon.Warning,
                InputAutoFocus = true,
                ShowCancelButton = false,
                Input = SweetAlertInputType.Textarea,
                InputValidator = new InputValidatorCallback((string input) => input.Length == 0 ? "Por favor informe algum valor" : null, this),
                ValidationMessage = "Por favor informe algum valor",
                ConfirmButtonText = "Finalizar",
                ShowCloseButton = true,
                ShowDenyButton = false,
                AllowEscapeKey = false,
                AllowEnterKey = true,
                ShowLoaderOnConfirm = true,
                AllowOutsideClick = false,
            });

        if (!string.IsNullOrEmpty(OBS.Value))
        {
            await service.CriarUsuario(user, OBS.Value);
            this.StateHasChanged();
            return;
        }
    }

    private void OnStateChanged(object? sender, PropertyChangedEventArgs e) => StateHasChanged();

    public void Dispose()
    {
        if (ModalComponent is not null)
        {
            ModalComponent.Dispose();
        }
        service.PropertyChanged -= OnStateChanged;
    }

}
