@inject ViewOptionService ViewOption
@inject UserService Userservice
@using System.ComponentModel
@using Microsoft.AspNetCore.SignalR.Client;
@using Newtonsoft.Json;
@using System.Globalization;
@using Radzen;
@using Shared_Razor_Components.FundamentalModels;
@using Shared_Static_Class.Model_DTO;
@inject IWebHostEnvironment Environment;


<div class="chatbar-content">
    <header class="chatbar-header">
        <Blazorise.Icon Name="Blazorise.IconName.Bars" IconSize="Blazorise.IconSize.Small" TextColor="Blazorise.TextColor.Light" />
        <Blazorise.Icon Name="Blazorise.IconName.Times" IconSize="Blazorise.IconSize.Small" TextColor="Blazorise.TextColor.Danger" @onclick="ViewOption.ToggleChatMenu" />
    </header>
    <div class="chatbar-body">

        @if (dataAtivos.Where(x => x.MATRICULA != Userservice.User.MATRICULA).Distinct().Any())
        @*@if (dataAtivos.Distinct().Any())*@
        {
            @foreach (var item in dataAtivos.Where(x => x.MATRICULA != Userservice.User.MATRICULA).Distinct().OrderBy(x => ViewOption.data.Any(y => y.Value.MATRICULA == x.MATRICULA)))
            @*@foreach (var item in SearchdataAtivos.Distinct().OrderBy(x => ViewOption.data.Any(y => y.Value.MATRICULA == x.MATRICULA)))*@
            {
                @if (item.Connected == true)
                {
                    var itemOnline = ViewOption.data.First(x => x.Value.MATRICULA == item.MATRICULA);

                    <Div Flex="Flex.InlineFlex" Width="Width.Is100" @onclick="() => OpenNewChat(itemOnline.Value)">
                        <Blazorise.Icon Name="Blazorise.IconName.Circle" IconSize="Blazorise.IconSize.Small" TextColor="Blazorise.TextColor.Success" />
                        <Div Flex="Flex.InlineFlex.AlignItems.Center" TextOverflow="TextOverflow.Wrap" Gap="Gap.Is3">
                            <Blazorise.CardImage Style="width:30px" Border="Blazorise.Border.RoundedCircle" Source="@(item.UserAvatar != null ? "data:image/png;base64," + SharedConverter.ConvertFileToString(item.UserAvatar) : "images/usericon.png")" Alt="Usuário Online"></Blazorise.CardImage>
                            <Div Flex="Flex.InlineFlex.AlignItems.Center.Column" TextOverflow="TextOverflow.Wrap">
                                <Div Flex="Flex.InlineFlex.AlignItems.Center.Row" TextOverflow="TextOverflow.Wrap" Gap="Gap.Is2">
                                    @textInfo.ToTitleCase(item.NOME.Split()[0].ToLower() + " " + (item.NOME.Split().LastOrDefault()?.ToLower() == item.NOME.Split()[0].ToLower() ? null : item.NOME.Split().LastOrDefault()?.ToLower()))
                                    @if (itemOnline.Value.NewMessage)
                                    {
                                        <Blazorise.Icon Name="Blazorise.IconName.Exclamation" IconSize="Blazorise.IconSize.ExtraSmall" TextColor="Blazorise.TextColor.Danger" />
                                    }
                                </Div>
                                @if (itemOnline.Value.ChatMessages.LastOrDefault() is not null)
                                {
                                    <span class="text-grey" style="font-family: Vivo-font-light; font-size: 15px; align-self: start">
                                        @itemOnline.Value.ChatMessages.Last().messsagem
                                    </span>
                                }
                                @if (itemOnline.Value.ChatMessages.LastOrDefault() is not null)
                                {
                                    <span class="text-grey" style="font-family:Vivo-font-light; font-size:8px; align-self:end">
                                        @{var Periodo = DateTime.Now - @itemOnline.Value.ChatMessages.Last().hora;}
                                        @($"{(Periodo.Days > 0 ? Periodo.Days + " d" : "")} {(Periodo.Hours > 0 ? Periodo.Hours + " h" : "")} {(Periodo.Minutes > 0 ? Periodo.Minutes + " m" : "")}")
                                    </span>
                                }
                            </Div>
                        </Div>
                    </Div>
                    <hr style="border: none; background-color: black; height: 1px; margin: 1rem 0;" />
                }
                else
                {
                    <Div Flex="Flex.InlineFlex" Width="Width.Is100">
                        <Blazorise.Icon Name="Blazorise.IconName.Circle" IconSize="Blazorise.IconSize.Small" TextColor="Blazorise.TextColor.Danger" />
                        <Div Flex="Flex.InlineFlex.AlignItems.Center" TextOverflow="TextOverflow.Wrap" Gap="Gap.Is3">
                            <Blazorise.CardImage Style="width:30px" Border="Blazorise.Border.RoundedCircle" Source="@(item.UserAvatar != null ? "data:image/png;base64," + SharedConverter.ConvertFileToString(item.UserAvatar) : "images/usericon.png")" Alt="Usuário Online"></Blazorise.CardImage>
                            <Div Flex="Flex.InlineFlex.AlignItems.Center.Column" TextOverflow="TextOverflow.Wrap">
                                @textInfo.ToTitleCase(item.NOME.Split()[0].ToLower() + " " + (item.NOME.Split().LastOrDefault()?.ToLower() == item.NOME.Split()[0].ToLower() ? null : item.NOME.Split().LastOrDefault()?.ToLower()))
                            </Div>
                        </Div>
                    </Div>
                    <hr style="border: none; background-color: black; height: 1px; margin: 1rem 0;" />
                }
            }
        }
        else
        {
            <h3>Não há nenhum usuário Online :(</h3>
        }
    </div>
    <footer class="chatbar-footer">
        <RadzenFormField Variant="Radzen.Variant.Outlined" Class="w-100">
            <Start>
                <RadzenIcon Icon="account_circle" />
                <RadzenIcon Icon="search" />
            </Start>
            <ChildContent>
                <RadzenTextBox Change="SearchChatEvent" />
            </ChildContent>
        </RadzenFormField>
        @*<RadzenTextArea @bind-Value="message" Cols="3" Culture="System.Globalization.CultureInfo.InstalledUICulture" Class="w-100" Placeholder="Mensagem" />*@
    </footer>
</div>

@code {
    string message { get; set; }

    private string BaseUrl
    {
        get
        {
            if (Environment.EnvironmentName == "Development")
            {
                return $"http://localhost:31510/vivoxhub/{Userservice.User.PDV}";
            }
            else
            {
                return $"http://brtdtbgs0090sl:9090/vivoxhub/{Userservice.User.PDV}";
            }
        }
    }

    public TextInfo textInfo = new CultureInfo("pt-br", false).TextInfo;
    public IEnumerable<ACESSOS_MOBILE_CHAT_DTO> dataAtivos = new List<ACESSOS_MOBILE_CHAT_DTO>();
    public IEnumerable<ACESSOS_MOBILE_CHAT_DTO> SearchdataAtivos
    {
        get
        {
            if (search != null)
            {
                if (search != string.Empty)
                {
                    return dataAtivos.Where(x => x.NOME.ToLower().Contains(search.ToLower())).Select(x=> new ACESSOS_MOBILE_CHAT_DTO
                    {

                    });
                }
            }

            return dataAtivos;
        }
    }

    public async Task OpenNewChat(ACESSOS_MOBILE_CHAT_DTO item)
    {

        item.NewMessage = false;
        ViewOption.OpenNewChat(new ChatOpenService
        {
            user = item
        });
    }

    public async Task SearchChatEvent(string args)
    {
        search = (string)args;
    }

    public string? search { get; set; } = string.Empty;
    public bool IsConnected => HubConnection?.State == HubConnectionState.Connected;
    [Inject] HubConnection HubConnection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                HubConnection.On<Dictionary<string, ACESSOS_MOBILE_CHAT_DTO>,List<ACESSOS_MOBILE_CHAT_DTO>>("UsersConnected", (Users, AllUsersConnected) =>
                {
                    ViewOption.data = Users;

                    dataAtivos = AllUsersConnected.Select(item =>
                    new ACESSOS_MOBILE_CHAT_DTO
                    {
                        ID = item.ID,
                        EMAIL = item.EMAIL,
                        MATRICULA = item.MATRICULA,
                        REGIONAL = item.REGIONAL,
                        CARGO = item.CARGO,
                        CANAL = item.CANAL,
                        PDV = item.PDV,
                        NOME = item.NOME,
                        UserAvatar = item.UserAvatar,
                        ChatMessages = ViewOption.data.First(x => x.Value.MATRICULA == item.MATRICULA).Value.ChatMessages
                    });

                    InvokeAsync(StateHasChanged);
                });

                HubConnection.SendAsync("SendUserInfo", Newtonsoft.Json.JsonConvert.SerializeObject(new Shared_Static_Class.Model_DTO.ACESSOS_MOBILE_CHAT_DTO
                {
                    ID = Userservice.User.ID,
                    EMAIL = Userservice.User.EMAIL,
                    MATRICULA = Userservice.User.MATRICULA,
                    REGIONAL = Userservice.User.REGIONAL,
                    CARGO = Userservice.User.CARGO,
                    CANAL = Userservice.User.CANAL,
                    PDV = Userservice.User.PDV,
                    NOME = Userservice.User.NOME,
                    UserAvatar = Userservice.User.UserAvatar,
                    Connected = true
                }));

                HubConnection.On<int, int, string>("MessageToUserChat", (mat_remetente, mat_destinatario, message) =>
                {
                    foreach (var UserConnected in ViewOption.data.Values.Where(x => x.MATRICULA == mat_remetente))
                    {
                        UserConnected.NewMessage = true;
                    }

                    InvokeAsync(StateHasChanged);
                });

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private void OnStateChanged(object? sender, PropertyChangedEventArgs e) => InvokeAsync(() => StateHasChanged());

    public void Dispose()
    {
        if (HubConnection is not null)
        {
            HubConnection.DisposeAsync();
        }
    }
}
