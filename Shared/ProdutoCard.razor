<div class="apply-component">
    <section class="principal-filters">
        <div class="p-3">
            <span class="filter-card-title">
                Ordernar Por
            </span>
            <br />
            <div class="d-flex flex-nowrap flex-row gap-2 flex-nowrap">
                <FluentSelect @bind-Value=Orderby Class="w-50" TOption="string">
                    <FluentOption Value="Avaliacao.Avaliacao" TOption="string">
                        Avaliação
                    </FluentOption>
                    <FluentOption Value="Avaliacao.PositionInRank" TOption="string">
                        Mais Vendidos
                    </FluentOption>
                    <FluentOption Value="Fabricante" TOption=string>
                        Fabricante
                    </FluentOption>
                    <FluentOption Value="IsOferta" TOption=string>
                        Estão em oferta
                    </FluentOption>
                    <FluentOption Value="Valor" TOption=string>
                        Preço
                    </FluentOption>
                </FluentSelect>
                <FluentIcon OnClick="@(() => AscOrDesc = true)" Value="@(new Icons.Filled.Size28.ArrowUp().WithColor(AscOrDesc ? "#8f46b3" :"#cbc3c3"))">
                </FluentIcon>
                <FluentIcon OnClick="@(() => AscOrDesc = false)" Value="@(new Icons.Filled.Size28.ArrowDown().WithColor(!AscOrDesc ? "#8f46b3" : "#cbc3c3"))">
                </FluentIcon>
            </div>
        </div>
        <div class="p-3">
            <div class="d-flex flex-nowrap flex-column gap-2">
                <FluentSearch @bind-Value=SearchGeral Class="m-auto" />
            </div>
        </div>
    </section>

    <div class="flex-stack-route">
        <!-- #region generic filters -->
        <aside class="page-filters">
            <span id="page-filters-header">
                Filtros
            </span>
            <div class="p-3">
                <span class="filter-card-title">
                    Categoria
                </span>
                <FluentSearch @bind-Value=SearchCategoria />
                <br />
                <br />
                <div class="d-flex flex-nowrap flex-column gap-2">
                    @foreach (var item in Enum.GetValues(typeof(Categoria_Produto)).Cast<Categoria_Produto>()
                    .Where(x => !string.IsNullOrEmpty(SearchCategoria) ? x.GetDisplayName().Contains(SearchCategoria, StringComparison.InvariantCultureIgnoreCase) : x.GetDisplayName() != null))
                    {
                        <FluentCheckbox Label="@item.GetDisplayName().ToLower()" />
                    }
                </div>
            </div>

            <div class="p-3">
                <span class="filter-card-title">
                    Especificação
                </span>
                <FluentSearch @bind-Value=SearchEspecificação />
                <br />
                <br />
                <div class="d-flex flex-nowrap flex-column gap-2">
                    @foreach (var item in Enum.GetValues(typeof(Categoria_Especificação)).Cast<Categoria_Especificação>()
                    .Where(x => !string.IsNullOrEmpty(SearchEspecificação) ? x.GetDisplayName().Contains(SearchEspecificação, StringComparison.InvariantCultureIgnoreCase) : x.GetDisplayName() != null))
                    {
                        <FluentCheckbox Label="@item.GetDisplayName().ToLower()" />
                    }
                </div>
            </div>
            <div class="p-3">
                <span class="filter-card-title">
                    Avaliação
                </span>
                <div>
                    <Rating Color="@("#f45294")" Class="w-100" MaxValue="5" />
                </div>
            </div>
        </aside>
        <!-- #endregion -->
        <!-- #region area where the products cards are -->
        <!-- #region where the products that is first loaded to the page are -->
        <div class="card-area">
            @if (Produtos.Any())
            {
                foreach (var Produto in ProdutosModelToShow)
                {
                    <div class="card-produto">
                        <div class="stack-route">
                            <span>
                                <div class="nav-button-position">
                                    @Produto.Avaliacao.PositionInRank #
                                </div>
                            </span>
                            <a @onclick="() => Produto.OpenClose()">
                                <div class="nav-button">
                                    <FluentIcon Value="@(new Icons.Filled.Size48.Info().WithColor("#cbc3c3"))">
                                    </FluentIcon>
                                </div>
                            </a>
                            <aside>
                                @{
                                    var image = Produto.Imagens.FirstOrDefault();
                                }
                                @if (image is not null)
                                {
                                    <img src="@("data:image/png;base64," + SharedConverter.ConvertFileToString(image.Imagem))" class="w-100" />
                                }
                            </aside>
                            @if (Produto.Imagens.Count >= 2)
                            {
                                <FluentHorizontalScroll class="both-gradient" Speed="600" Easing=ScrollEasing.EaseInOut>
                                    @foreach (var values in Produto.Imagens)
                                    {
                                        <div>
                                            <img src="@("data:image/png;base64," + SharedConverter.ConvertFileToString(values.Imagem))" style="object-fit: fill; width:25px; height:25px; border-radius:2.5px;" />
                                        </div>
                                    }
                                </FluentHorizontalScroll>
                            }
                            else
                            {
                            }
                            <div class="product-description">
                                @{
                                    int roundAvaliacao = (int)Math.Round((Produto.Avaliacao.Avaliacao / 10.0) / 2, 0);
                                }
                                <p style="font-family:Vivo-font-bold; margin:0">
                                    @Produto.Nome
                                </p>
                                <Rating Color="@("#f45294")" SelectedValue="roundAvaliacao" Class="w-100" MaxValue="5" Disabled />
                                <div class="inline-flex g-2 w-100">
                                    <span style="font-family: Vivo-font; font-size: 15px">
                                        @Produto.Descrição
                                    </span>
                                    <br />
                                    @if (Produto.IsOpened)
                                    {
                                        <div>
                                            <FluentHorizontalScroll Class="both-gradient" Duration="600" Easing="ScrollEasing.Linear">
                                                @foreach (var PrimaryInfo in Produto.Ficha.Where(x => x.IsImportant == true))
                                                {
                                                    <div class="card p-2">
                                                        <RadzenBadge BadgeStyle="Radzen.BadgeStyle.Light"
                                                                     Text=@(@PrimaryInfo.Especificação) class="me-1" Style="text-overflow:ellipsis;background:#9d17be;color:white" />
                                                        <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 0.5rem 0;" />
                                                        <div class="d-flex flex-row align-items-center p-0 m-0">
                                                            <h5 class="mb-0">@(PrimaryInfo.Valor)</h5>
                                                        </div>
                                                    </div>
                                                }
                                            </FluentHorizontalScroll>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="button-navigation">
                                <button @onclick=@(() => NavigationManager.NavigateTo($"produto/get?id={Produto.ID_PRODUTO.ToString()}"))>
                                    Consultar
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <label>
                    <span class="spinner-border spinner-border-sm" />
                </label>
            }
        </div>
        <!-- #endregion -->
        <!-- #endregion -->
    </div>


</div>