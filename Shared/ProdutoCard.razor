<div class="apply-component">
    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" Wrap HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Top"
                 Class="flex-stack-route p-2">
        @if (Produtos.Any())
        {
            foreach (var Produto in ProdutosModel)
            {
                <FluentCard AreaRestricted=false Class="@(Produto.IsOpened ? "produto-card-opened" : "abc")">
                    <div class="stack-route">
                        <a @onclick="() => Produto.OpenClose()">
                            <div class="nav-button">
                                <FluentIcon Value="@(new Icons.Filled.Size24.ArrowRight().WithColor("#ffffff"))">
                                </FluentIcon>
                            </div>
                        </a>
                        <aside>

                            @{
                                var image = Produto.Imagens.FirstOrDefault();
                            }

                            @if (image is not null)
                            {
                                <img src="@("data:image/png;base64," + SharedConverter.ConvertFileToString(image.Imagem))" class="w-100" />
                            }
                        </aside>
                        <div class="product-description">
                            @{
                                int roundAvaliacao = (int)Math.Round((Produto.Avaliacao / 10.0) / 2, 0);
                            }
                            <p style="font-family:Vivo-font-bold; margin:0;">
                                @Produto.Nome
                            </p>
                            <Rating Color="@("#f45294")" SelectedValue="roundAvaliacao" Class="w-100" MaxValue="5" Disabled />
                            <div class="inline-flex g-2 w-100">
                                <span style="font-family: Vivo-font; font-size: 15px; color:white;">
                                    @Produto.Descrição
                                </span>
                                <br/>
                                @if (Produto.IsOpened)
                                {
                                    <div>
                                        <FluentHorizontalScroll Class="both-gradient" Duration="600" Easing="ScrollEasing.Linear">
                                            @foreach (var PrimaryInfo in Produto.Ficha.Where(x => x.IsImportant == true))
                                            {
                                                <div class="card p-2" >
                                                    <RadzenBadge BadgeStyle="Radzen.BadgeStyle.Light"
                                                                 Text=@(@PrimaryInfo.Especificação) class="me-1" Style="text-overflow:ellipsis;background:#9d17be;color:white" />
                                                    <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 0.5rem 0;" />
                                                    <div class="d-flex flex-row align-items-center p-0 m-0">
                                                        <h5 class="mb-0">@(PrimaryInfo.Valor)</h5>
                                                    </div>
                                                </div>
                                            }
                                        </FluentHorizontalScroll>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </FluentCard>
            }
        }
        else
        {
            <label>
                <span class="spinner-border spinner-border-sm" />
            </label>
        }
    </FluentStack>


</div>